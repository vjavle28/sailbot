---
import { getEntry } from "astro:content";
import Alert from "../components/Alert.astro";
import Guide from "../components/Guide.astro";
import Layout from "../components/Layout.astro";
import TableRow from "../components/TableRow.astro";
import { supabase } from "../utils/database";

export const prerender = false;

let sensorData;
let sensorError;

// Fetch latest sailboat sensor data from Supabase if connection is set up
if (supabase) {
  const { data, error } = await supabase
    .from("sailboat_sensor_data")
    .select("*")
    .order("timestamp", { ascending: false })
    .limit(50);
  sensorData = data;
  sensorError = error;
}

// Get guides
const connectGuide = await getEntry("guides", "guide-connect-supabase");
const fetchDataGuide = await getEntry("guides", "guide-fetch-data");
---

<Layout title="Sailboat Sensor Data">
  {
    supabase ? (
      sensorData ? (
        <>
          <h1 class="mb-8 text-4xl font-bold">Recent Sailboat Sensor Readings</h1>
          <table class="w-full text-left">
            <thead>
              <tr class="font-mono text-base border-t border-b">
                <th>Time</th>
                <th>Latitude</th>
                <th>Longitude</th>
                <th>Wind (m/s)</th>
                <th>Boat (kn)</th>
                <th>Battery</th>
                <th>Details</th>
              </tr>
            </thead>
            <tbody>
              {sensorData?.map((row) => (
                <tr class="border-b border-neutral-600">
                  <td class="font-mono">{new Date(row.timestamp).toLocaleString()}</td>
                  <td>{row.latitude.toFixed(6)}</td>
                  <td>{row.longitude.toFixed(6)}</td>
                  <td>{row.wind_speed ?? "—"}</td>
                  <td>{row.boat_speed ?? "—"}</td>
                  <td>{row.battery_level ?? "—"}</td>
                  <td><a href={`/frameworks/${row.id}`} class="underline">View</a></td>
                </tr>
              ))}
            </tbody>
          </table>
        </>
      ) : (
        <>
          {sensorError && (
            <Alert title={sensorError.code} text={sensorError.message} variant="error" />
          )}
          {fetchDataGuide && <Guide guide={fetchDataGuide} />}
        </>
      )
    ) : (
      <>
        <Alert title="Finish setting up your new site" text="Before your website is ready, you must complete the steps from the guide below to create, populate, and connect your Supabase database."/>
        {connectGuide && <Guide guide={connectGuide} />}
      </>
    )
  }
</Layout>
